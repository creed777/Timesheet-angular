// <auto-generated />
using System;
using API.Models;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace API.Migrations
{
    [DbContext(typeof(DatabaseContext))]
    [Migration("20220715144857_Initial")]
    partial class Initial
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.7")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("API.Models.ClientModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClientDescription")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClientId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClientName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("ClientStatusId")
                        .HasColumnType("int");

                    b.Property<int>("ProjectId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ClientStatusId");

                    b.ToTable("Client");
                });

            modelBuilder.Entity("API.Models.ClientStatusModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClientStatusName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("ClientStatus");
                });

            modelBuilder.Entity("API.Models.ProjectModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime?>("ActualEndDate")
                        .HasColumnType("datetime2");

                    b.Property<decimal?>("ActualLaborCost")
                        .HasPrecision(7, 4)
                        .HasColumnType("decimal(7,4)");

                    b.Property<decimal?>("ActualMaterialCost")
                        .HasPrecision(7, 4)
                        .HasColumnType("decimal(7,4)");

                    b.Property<DateTime?>("ActualStartDate")
                        .HasColumnType("datetime2");

                    b.Property<decimal?>("ActualTotalHours")
                        .HasPrecision(7, 4)
                        .HasColumnType("decimal(7,4)");

                    b.Property<int>("ClientId")
                        .HasColumnType("int");

                    b.Property<long?>("DivisionId")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("EstimatedEndDate")
                        .HasColumnType("datetime2");

                    b.Property<decimal?>("EstimatedLaborCost")
                        .HasPrecision(7, 4)
                        .HasColumnType("decimal(7,4)");

                    b.Property<decimal?>("EstimatedMaterialCost")
                        .HasPrecision(7, 4)
                        .HasColumnType("decimal(7,4)");

                    b.Property<DateTime?>("EstimatedStartDate")
                        .HasColumnType("datetime2");

                    b.Property<decimal?>("EstimatedTotalHours")
                        .HasPrecision(7, 4)
                        .HasColumnType("decimal(7,4)");

                    b.Property<string>("ProjectDescription")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProjectId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<long?>("ProjectManagerId")
                        .HasColumnType("bigint");

                    b.Property<string>("ProjectName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ClientId");

                    b.ToTable("Project");
                });

            modelBuilder.Entity("API.Models.ProjectStatusModel", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<int>("ProjectId")
                        .HasColumnType("int");

                    b.Property<string>("StatusName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ProjectId")
                        .IsUnique();

                    b.ToTable("ProjectStatus");
                });

            modelBuilder.Entity("API.Models.ResourceModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ProjectId")
                        .HasColumnType("int");

                    b.Property<string>("ResourceId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long?>("ResourceStatusId")
                        .HasColumnType("bigint");

                    b.Property<long?>("ResourceTypeId")
                        .HasColumnType("bigint");

                    b.Property<int>("TaskId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ResourceStatusId");

                    b.HasIndex("ResourceTypeId");

                    b.ToTable("Resource");
                });

            modelBuilder.Entity("API.Models.ResourceStatusModel", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<int>("ResourceId")
                        .HasColumnType("int");

                    b.Property<string>("StatusName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("ResourceStatus");
                });

            modelBuilder.Entity("API.Models.ResourceTypeModel", b =>
                {
                    b.Property<long>("ResourceTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("ResourceTypeId"), 1L, 1);

                    b.Property<decimal?>("Cost")
                        .HasPrecision(7, 4)
                        .HasColumnType("decimal(7,4)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ResourceTypeId");

                    b.ToTable("ResourceTypes");
                });

            modelBuilder.Entity("API.Models.TaskModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime?>("ActualEndDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("ActualStartDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("EstimatedEndDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("EstimatedStartDate")
                        .HasColumnType("datetime2");

                    b.Property<HierarchyId>("Level")
                        .HasColumnType("hierarchyid");

                    b.Property<int>("ProjectId")
                        .HasColumnType("int");

                    b.Property<string>("TaskDescription")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TaskName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("TaskStatusId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ProjectId");

                    b.HasIndex("TaskStatusId");

                    b.ToTable("Task");
                });

            modelBuilder.Entity("API.Models.TaskStatusModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("StatusName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("TaskStatus");
                });

            modelBuilder.Entity("API.Models.TaskTimeModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("TaskId")
                        .HasColumnType("int");

                    b.Property<int?>("TaskModelId")
                        .HasColumnType("int");

                    b.Property<decimal>("Time")
                        .HasPrecision(7, 4)
                        .HasColumnType("decimal(7,4)");

                    b.HasKey("Id");

                    b.HasIndex("TaskModelId");

                    b.ToTable("TaskTime");
                });

            modelBuilder.Entity("ProjectModelResourceModel", b =>
                {
                    b.Property<int>("ProjectId")
                        .HasColumnType("int");

                    b.Property<int>("ResourceId")
                        .HasColumnType("int");

                    b.HasKey("ProjectId", "ResourceId");

                    b.HasIndex("ResourceId");

                    b.ToTable("ProjectModelResourceModel");
                });

            modelBuilder.Entity("ResourceModelTaskModel", b =>
                {
                    b.Property<int>("ResourceId")
                        .HasColumnType("int");

                    b.Property<int>("TaskId")
                        .HasColumnType("int");

                    b.HasKey("ResourceId", "TaskId");

                    b.HasIndex("TaskId");

                    b.ToTable("ResourceModelTaskModel");
                });

            modelBuilder.Entity("API.Models.ClientModel", b =>
                {
                    b.HasOne("API.Models.ClientStatusModel", "ClientStatus")
                        .WithMany()
                        .HasForeignKey("ClientStatusId");

                    b.Navigation("ClientStatus");
                });

            modelBuilder.Entity("API.Models.ProjectModel", b =>
                {
                    b.HasOne("API.Models.ClientModel", "Client")
                        .WithMany("Project")
                        .HasForeignKey("ClientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Client");
                });

            modelBuilder.Entity("API.Models.ProjectStatusModel", b =>
                {
                    b.HasOne("API.Models.ProjectModel", "Project")
                        .WithOne("ProjectStatus")
                        .HasForeignKey("API.Models.ProjectStatusModel", "ProjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Project");
                });

            modelBuilder.Entity("API.Models.ResourceModel", b =>
                {
                    b.HasOne("API.Models.ResourceStatusModel", "ResourceStatus")
                        .WithMany("Resource")
                        .HasForeignKey("ResourceStatusId");

                    b.HasOne("API.Models.ResourceTypeModel", "ResourceType")
                        .WithMany()
                        .HasForeignKey("ResourceTypeId");

                    b.Navigation("ResourceStatus");

                    b.Navigation("ResourceType");
                });

            modelBuilder.Entity("API.Models.TaskModel", b =>
                {
                    b.HasOne("API.Models.ProjectModel", "Project")
                        .WithMany("Task")
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("API.Models.TaskStatusModel", "TaskStatus")
                        .WithMany()
                        .HasForeignKey("TaskStatusId");

                    b.Navigation("Project");

                    b.Navigation("TaskStatus");
                });

            modelBuilder.Entity("API.Models.TaskTimeModel", b =>
                {
                    b.HasOne("API.Models.TaskModel", null)
                        .WithMany("TaskTime")
                        .HasForeignKey("TaskModelId");
                });

            modelBuilder.Entity("ProjectModelResourceModel", b =>
                {
                    b.HasOne("API.Models.ProjectModel", null)
                        .WithMany()
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("API.Models.ResourceModel", null)
                        .WithMany()
                        .HasForeignKey("ResourceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ResourceModelTaskModel", b =>
                {
                    b.HasOne("API.Models.ResourceModel", null)
                        .WithMany()
                        .HasForeignKey("ResourceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("API.Models.TaskModel", null)
                        .WithMany()
                        .HasForeignKey("TaskId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("API.Models.ClientModel", b =>
                {
                    b.Navigation("Project");
                });

            modelBuilder.Entity("API.Models.ProjectModel", b =>
                {
                    b.Navigation("ProjectStatus");

                    b.Navigation("Task");
                });

            modelBuilder.Entity("API.Models.ResourceStatusModel", b =>
                {
                    b.Navigation("Resource");
                });

            modelBuilder.Entity("API.Models.TaskModel", b =>
                {
                    b.Navigation("TaskTime");
                });
#pragma warning restore 612, 618
        }
    }
}
